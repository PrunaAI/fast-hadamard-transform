name: Build wheels only

on:
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build Wheel
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
          os: [ubuntu-22.04]
          python-version: ['3.9', '3.10', '3.11', '3.12']
          torch-version: ['2.7.0']
          cuda-version: ['12.6.0']
          cxx11_abi: ['FALSE', 'TRUE']
          exclude:
            - torch-version: '1.12.1'
              python-version: '3.11'
            - torch-version: '2.0.1'
              python-version: '3.7'
            - torch-version: '2.1.2'
              python-version: '3.7'
            - torch-version: '2.2.0'
              python-version: '3.7'
            - torch-version: '1.12.1'
              cuda-version: '12.2.0'
            - torch-version: '1.13.1'
              cuda-version: '12.2.0'
            - torch-version: '2.0.1'
              cuda-version: '12.2.0'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set CUDA and PyTorch versions
        run: |
          echo "MATRIX_CUDA_VERSION=$(echo ${{ matrix.cuda-version }} | awk -F \. {'print $1 $2'})" >> $GITHUB_ENV
          echo "MATRIX_TORCH_VERSION=$(echo ${{ matrix.torch-version }} | awk -F \. {'print $1 "." $2'})" >> $GITHUB_ENV
          echo "MATRIX_PYTHON_VERSION=$(echo ${{ matrix.python-version }} | awk -F \. {'print $1 $2'})" >> $GITHUB_ENV

      - name: Free up disk space
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL

      - name: Set up swap space
        if: runner.os == 'Linux'
        uses: pierotofy/set-swap-space@v1.0
        with:
          swap-size-gb: 10

      - name: Install CUDA ${{ matrix.cuda-version }}
        if: ${{ matrix.cuda-version != 'cpu' }}
        uses: Jimver/cuda-toolkit@v0.2.11
        id: cuda-toolkit
        with:
          cuda: ${{ matrix.cuda-version }}
          linux-local-args: '["--toolkit"]'
          method: 'network'

      - name: Install PyTorch ${{ matrix.torch-version }}+cu${{ matrix.cuda-version }}
        run: |
          pip install --upgrade pip
          pip install lit
          export TORCH_CUDA_VERSION=$(python -c "
          import os
          minv = {'1.12': 113, '1.13': 116, '2.0': 117, '2.1': 118, '2.2': 118, '2.4': 118, '2.5': 118}
          maxv = {'1.12': 116, '1.13': 117, '2.0': 118, '2.1': 121, '2.2': 121, '2.4': 124, '2.5': 124}
          torch_version = os.environ['MATRIX_TORCH_VERSION']
          cuda_version = int(os.environ['MATRIX_CUDA_VERSION'])
          result = max(min(cuda_version, maxv[torch_version]), minv[torch_version])
          print(result)
          ")
          pip install --no-cache-dir torch==${{ matrix.torch-version }} --index-url https://download.pytorch.org/whl/cu${TORCH_CUDA_VERSION}
          nvcc --version
          python --version
          python -c "import torch; print('PyTorch:', torch.__version__)"
          python -c "import torch; print('CUDA:', torch.version.cuda)"
          python -c "from torch.utils import cpp_extension; print (cpp_extension.CUDA_HOME)"

      - name: Build wheel
        run: |
          export FAST_HADAMARD_TRANSFORM_LOCAL_VERSION=cu${MATRIX_CUDA_VERSION}torch${MATRIX_TORCH_VERSION}cxx11abi${{ matrix.cxx11_abi }}
          pip install setuptools==68.0.0
          pip install ninja packaging wheel
          export PATH=/usr/local/nvidia/bin:/usr/local/nvidia/lib64:$PATH
          export LD_LIBRARY_PATH=/usr/local/nvidia/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH
          MAX_JOBS=2 FAST_HADAMARD_TRANSFORM_FORCE_BUILD="TRUE" FAST_HADAMARD_TRANSFORM_FORCE_CXX11_ABI=${{ matrix.cxx11_abi}} python setup.py bdist_wheel --dist-dir=dist
          tmpname=cu${MATRIX_CUDA_VERSION}torch${MATRIX_TORCH_VERSION}cxx11abi${{ matrix.cxx11_abi }}
          wheel_name=$(ls dist/*whl | xargs -n 1 basename | sed "s/-/+$tmpname-/2")
          ls dist/*whl |xargs -I {} mv {} dist/${wheel_name}
          echo "wheel_name=${wheel_name}" >> $GITHUB_ENV

      - name: Log Built Wheels
        run: |
          ls dist

      - name: Upload Built Wheels as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built-wheels
          path: ./dist
